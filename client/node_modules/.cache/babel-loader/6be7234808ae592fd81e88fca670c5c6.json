{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); // Creating Observer and update collection on each database change\n\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // updateCollections(collectionsMap);\n\n      this.setState({\n        loading: false\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Vlad/Desktop/React/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsStartAsync","dispatch","collectionRef","collection","unsubscribeFromSnapshot","onSnapshot","snapshot","collectionsMap","setState","loading"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB,CADe,CAGf;;AACA,SAAKC,uBAAL,GAA+BF,aAAa,CAACG,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AACtE,YAAMC,cAAc,GAAGX,+BAA+B,CAACU,QAAD,CAAtD,CADsE,CAEtE;;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAJ8B,CAA/B;AAKH,GATD;AAUH,CAXM","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        // Creating Observer and update collection on each database change\r\n        this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            // updateCollections(collectionsMap);\r\n            this.setState({ loading: false });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}