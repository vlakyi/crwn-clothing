{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport ShopActionTypes from './shop.types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // effect to invoke function to make saga able to stop this function execution if we need to.\n\n    yield put(fetchCollectionsSuccess(collectionsMap)); // saga's version of dispatch\n  } catch (error) {} // collectionRef.get().then(snapshot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap))\n  // })\n  // .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/Vlad/Desktop/React/crwn-clothing/src/redux/shop/shop.saga.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,MAAI;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC,CAHA,CAGgF;;AAChF,UAAMT,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT,CAJA,CAIwD;AAC3D,GALD,CAKE,OAAOC,KAAP,EAAc,CAEf,CARoC,CAUrC;AACA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMf,SAAS,CAACK,eAAe,CAACW,uBAAjB,EAA0CR,qBAA1C,CAAf;AACH","sourcesContent":["import {takeEvery, call, put} from 'redux-saga/effects';\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nimport ShopActionTypes from './shop.types';\r\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.actions';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);   // effect to invoke function to make saga able to stop this function execution if we need to.\r\n        yield put(fetchCollectionsSuccess(collectionsMap));     // saga's version of dispatch\r\n    } catch (error) {\r\n        \r\n    }\r\n\r\n    // collectionRef.get().then(snapshot => {\r\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n    //     dispatch(fetchCollectionsSuccess(collectionsMap))\r\n    // })\r\n    // .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\r\n}"]},"metadata":{},"sourceType":"module"}