{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger';\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport rootReducer from './root-reducer'; // Saga\n\nimport rootSaga from './root-saga';\nimport createSagaMiddleware from 'redux-saga';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["C:/Users/Vlad/Desktop/React/crwn-clothing/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","composeWithDevTools","rootReducer","rootSaga","createSagaMiddleware","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,mBAAT,QAAoC,0CAApC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,MAAMC,cAAc,GAAGD,oBAAoB,EAA3C;AAEA,MAAME,WAAW,GAAG,CAACD,cAAD,CAApB;;AAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBV,MAAjB;AACH;;AAED,OAAO,MAAMW,KAAK,GAAGd,WAAW,CAACK,WAAD,EAAcD,mBAAmB,CAACH,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CAAjC,CAAzB;AAEPD,cAAc,CAACO,GAAf,CAAmBT,QAAnB;AAEA,OAAO,MAAMU,SAAS,GAAGd,YAAY,CAACY,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore } from 'redux-persist'\r\nimport logger from 'redux-logger';\r\n\r\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\"\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\n// Saga\r\nimport rootSaga from './root-saga';\r\nimport createSagaMiddleware from 'redux-saga'\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport const persistor = persistStore(store);"]},"metadata":{},"sourceType":"module"}